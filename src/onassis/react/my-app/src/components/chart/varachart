import React from 'react';
import c3 from 'c3';
import axios from 'axios';
import moment from 'moment';

import {chart_load} from '../../actions/chart'
import {day_load} from '../../actions/day'

import './style_region.css';

var dateFormat = require('dateformat');

import { connect } from 'react-redux'

const chart_config = {
	    bindto: '#chart',
	 //   selectedDay: null,
	    grid: {
	        y: {
	            lines: [{value: 0}]
	        }
	    },
        tooltip: {
            grouped: false // Default true
        },
	    data: {

	        x: 'x',
	        xFormat: '%Y%m%d', // 'xFormat' can be used as custom format of 'x'
	        columns: null,
	        	
	        	/*[

	            ['x', '20130101', '20130102', '20130103', '20130104', '20130105', '20130106'
	                , '20130107', '20130108', '20130109', '20130110', '20130111', '20130112'
	                , '20130113', '20130114', '20130115', '20130116', '20130117', '20130118'

	                , '20130119', '20130120', '20130121', '20130122', '20130123', '20130124'
	                , '20130125', '20130126', '20130127', '20130128', '20130129', '20130130'
	                , '20130131', '20130201', '20130202', '20130203', '20130204', '20130205'                
	            ],
	            ['Income', 30, 20, 50, 40, 0, 50, 30, 20, 50, 40, 0, 50, 30, 20, 50, 40, 0, 50
	            , 30, 20, 50, 40, 0, 50, 30, 20, 50, 40, 0, 50, 30, 20, 50, 40, 0, 50],
	            ['Expence', -200, -130, -90, -240, 0, -220, -200, -130, -90, -240, 0, -220, -200, -130, -90, -240, 0, -220
	            , -200, -130, -90, -240, 0, -220, -200, -130, -90, -240, 0, -220, -200, -130, -90, -240, 0, -220],
	            ['VISA', 200, 130, -1, 140, 4, 229, 200, 130, -1, 140, 4, 229, 200, 130, -1, 140, 4, 229
	            , 200, 130, -1, 140, 4, 229, 200, 130, -1, 140, 4, 229, 200, 130, -1, 140, 4, 229],
	            ['Cash', 100, 13, 90, 40, 0, 20, 100, 13, 90, 40, 0, 20, 100, 13, 90, 40, 0, 20
	            , 100, 13, 90, 40, 0, 20, 100, 13, 90, 40, 0, 20, 100, 13, 90, 40, 0, 20],
	            ['All', 250, 130, 90, 240, 0, 220, 250, 130, 90, 240, 0, 220, 250, 130, 90, 240, 0, 220
	            , 250, 130, 90, 240, 0, 220, 250, 130, 90, 240, 0, 220, 250, 130, 90, 240, 0, 220],
	         ]*/
	        	
	        	//response.data,

	            
	            transition: {
	                duration: 500
	            },
	        	names: {
	        		'I': 'Income',
	        		'E': 'Exp',
	        	    '1': 'Account 1',
	        	    '2': 'Account 2',
	        	    '3': 'Account 3',
	        	    '4': 'Account 4',
	        	    '5': 'Account 5',
	        	    '6': 'Account 6',
	        	    

	        	  },

			       type:'bar',
			        types: {
			            '1': 'line',
			            '2': 'line',
			            '3': 'line',
			            '4': 'line',
			            '5': 'line',
			            '6': 'line',
			            
			          },
		        	  groups: [
				            ['E','I']
				      ],					          

	   /*
	    * originals
	         type: 'bar',
	        types: {
	            All: 'spline',
	            Cash: 'line',
	            VISA: 'line',
	          },
	        groups: [
	            ['Income','Expence']
	        ], */
	        //regions: [
	        //  {start:0, end:1}
	        //],
	        selection: {
	          //grouped: true,
	          //enabled: true,
	          //draggable: true
	        },
	       /* onclick: function (d, element) { console.log("CLICK");
	                                         console.log(d); 
	                                        // console.log(chart3.selected());



	                                       },
	        onmouseover: function (d, element) { 
	        								 console.log("ONMOUSEOVER");
	                                         console.log(d);
	                                         //debugger;
	                                         this.props.dayLoad(d);
	                                         },*/
	       // "onmouseover": this.onmouseover,
	       // onmouseout: function (d, element) { console.log("ONMOUSEOUT");
	       //                                  console.log(d); },                                                                    
	    },
	   /* regions: [
	          { start: '20130102', end: '20130103' },
	          { start: '20130104', end: '20130105' }
	    ],*/
	   /* selection: {
	          //grouped: true,
	      enabled: true,
	      draggable: false
	    },*/
	    axis: {
	        x: {
	            type: 'timeseries',
	            tick: {
	              //  count: 6,
	                format: '%d.%m.'
	               // format: '%d.%m.%Y'
	            }
	        }
	    },
	    legend: {
	    	  item: {
	    	    onclick: function (id) {  console.log("LEGEND"); console.log(id)},
	    		onmouseover: function (id) {  
	    			//debugger;
	    			console.log("LEGEND"); 
	    			console.log(id); 
	    			//magic copied from caller to do the default behaviour (dim and focus of curve) :
	                if (!this.transiting && this.isTargetToShow(id)) {
	                	this.api.focus(id);
	                }	

	    		}
	    	  }
	    	}
	}


class Chart extends React.Component {
  constructor(props) {
    super(props);
    console.log("Chart constructor")
    this.state = {
    		start: new Date(),
    		end: new Date(),
    		curves: null
    }
    this.draw = this.draw.bind(this);
    this.onmouseover = this.onmouseover.bind(this);
    this.onmouseout = this.onmouseout.bind(this);
    this.timer = null;
  }
  
  onmouseout() {
	  
	  if (this.timer) {
		  console.log("ONMOUSEOOUT CLEAR TIMERS");
		  clearTimeout(this.timer)
	  }
	  //this.draw()
	  /*this.timers.forEach( (timer) => {clearTimeout(timer)} )
	  this.timers = [];*/
  }
  
  onmouseover(d, element) {
	 // console.log("ONMOUSEOVER");
     // console.log(d);
	  //this.timers.forEach( (timer) => {clearTimeout(timer)} )
	 
      if( d.id === "I") { //this is because event will be trigger for all curves and we want to load day only once
    	  console.log("ONMOUSEOVER TIMER LAUNCH");
    	  var f = () => 
    	  {	  
    		  console.log("LAUNCH" + d.x);
    		  //debugger;
    		  //chart_config.selectedDay = d.x
    		  //this.draw()
    		  //this.selectedDay = d.x;
    		  this.props.dayLoad(d.x)
    		  
    	  }
    	  //this.timers.push(setTimeout(f,3000))
    	  this.timer = setTimeout(f,300)
    	  
      }
  }
  
  //draw(curves, selectedDay) {
  draw() {
	  //console.log("selectedDay:" + chart_config.selectedDay)
  //draw(curves) {
	  //chart_config.data.columns = curves;
	  chart_config.data.onmouseover = this.onmouseover;
	  chart_config.data.onclick = this.onmouseover;

	 /* if (chart_config.selectedDay) {
		  var endDate = moment(chart_config.selectedDay, "yyyymmdd").add('days', 3).toDate()
		  chart_config.data.regions = [
			  { 
				  start: dateFormat(chart_config.selectedDay, "yyyymmdd"), 
				  end: dateFormat(endDate, "yyyymmdd") 
			  }
          ];
          //console.log("selectedDay:")
          //console.log(chart_config.data.regions)
	  }*/
	  
	  var chart3 = c3.generate(chart_config);
  }
  
  componentDidMount() {
	  console.log("Chart componentDidMount ")
	  console.log(this.props)
	 // this.draw();
  }
  
  componentWillReceiveProps(nextProps){
	  console.log("Chart ------------------- componentWillReceiveProps ")
	  console.log(nextProps)
	  if(this.props.start != nextProps.start || this.props.end != nextProps.end){
		  this.props.chartLoad(nextProps.start, nextProps.end)
	  } else {
		  chart_config.data.columns = nextProps.curves
		  //chart_config.selectedDay = null
		  this.draw()
		  //this.draw(nextProps.curves, nextProps.selectedDay)
		  
		  //this.curves = nextProps.curves
		  //this.draw(nextProps.curves)
	  }
  }

  render() {
    return (
	    <div onMouseOut={() => this.onmouseout()}>
	        <div id="chart" />
	    </div>
    );
  }
}
const mapStateToProps = (store) => {
	  return {
  		start: store.dateRange.s,
		end: store.dateRange.e,
		//selectedDay: store.day.day,
		curves: store.chart.curves
	  }
  }

function mapDispatchToProps(dispatch) {
    return({
    	chartLoad: (s, e) => {
        	dispatch(chart_load(s, e)) 
        },
        dayLoad: (d) => {
        	dispatch(day_load(d)) 
        }
    })
}

Chart.defaultProps = {
		selectedDay : null
};
export default connect(mapStateToProps, mapDispatchToProps)(Chart)
