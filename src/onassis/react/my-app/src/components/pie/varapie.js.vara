import React from 'react'
import c3 from 'c3'
import '../../../node_modules/c3/c3.min.css'

import { pie_load } from '../../actions/pie'
import { category_load } from '../../actions/payments'
import { connect } from 'react-redux'

class Pie extends React.Component {

    constructor(props) {
        super(props)
        var that = this;
        this.state = {
            start: new Date(),
            end: new Date(),
            slices: null
        }
        this.draw = this.draw.bind(this)
        this.onmouseover = this.onmouseover.bind(this)
        this.onmouseout = this.onmouseout.bind(this)
        this.timer = null
        this.chart_config = {
        	
        		sum_i: 0,
        		sum_e: 0,
    		    bindto: '#pie',
    		    tooltip: {
    		        format: {
    		            //title: function (d) { return 'Datax ' + d; },
    		            value: function (value, ratio, id) {
    		            	if (id.startsWith("p")) {
    		            		return value + "  (" + parseFloat(Math.round((value*100/that.chart_config.sum_i) * 100) / 100).toFixed(2) + "%)";
    		            	}else{
    		            		return -value + "  (" + parseFloat(Math.round((value*100/that.chart_config.sum_e) * 100) / 100).toFixed(2) + "%)";
    		        		    
    		            	}
    		            	//return parseFloat(Math.round(num3 * 100) / 100).toFixed(2);
    		                //return value+ " " + ratio + " " + id;
    		            	//return value+ " " + ratio + " " + id + " " + that.chart_config.sum_i +" " + + that.chart_config.sum_e;
    		            }
//    		            value: d3.format(',') // apply this format to both y and y2
    		        }
    		    },
    		    data: {
                    names: {
    		            '1': 'yksi',
    		            '2': 'kaksi',
    		            '3': 'kolme',
    		            '4': 'neljä',
    		            '5': 'viisi',
    		            '6': 'kuuri',
    		            '7': 'seitsemän',
    		            '8': 'kahdeksan'
                    },

    		        columns: [
    		            ['1', 10],
    		            ['2', 10],
    		            ['3', 10],
    		            ['4', 10],
    		            ['5', 10],
    		            ['6', 10],
    		            ['7', 10],
    		            ['8', 20]
    		        ],
    		        colors: {
    		            '1': 'red',
    		            '2': 'red',
    		            '3': 'red',
    		            '4': 'red',
    		            '5': 'green',
    		            '6': 'green',
    		            '7': 'green',
    		            '8': 'green'
    		        },
    		        order: null,
    		        onclick: function (c) { 
    		        	console.log("CLICK SLICE")
    		        	that.onmouseover(c.id)
    		        },
    		        onmouseover: function (c) { 
    		        	console.log("onmouseover SLICE")
    		        	that.onmouseover(c.id)
    		        },    		        
    		        type: 'pie'
    		    },
    		    pie: {
    		        label: {
    		            format: function (value, ratio, id) {
    		                return value;
    		            }
    		        }
    		    },
                legend: {
                    item: {
                        onclick: function(c) {
                            console.log("CLICK LEGEND")
                            console.log(c)
                        	that.onmouseover(c)
                        },
                        onmouseover: function(c) {
                            console.log("onmouseover LEGEND")
                            console.log(c)
                            //magic copied from caller to do the default behaviour (i.e. dim other curves and focus the selected curve) :
                            if (!this.transiting && this.isTargetToShow(c)) {
                                this.api.focus(c)
                            }
                            //magic ends here
                            that.onmouseover(c)
                        }
                    }
                }
    		}
    }

    onmouseout() {
        if (this.timer) {
            clearTimeout(this.timer)
        }
    }

    onmouseover(c) {
    		
            var f = () => {
                this.props.categoryLoad(c.substring(1), this.props.start, this.props.end)
            }
            this.timer = setTimeout(f, 300)
    }

    draw() {
        c3.generate(this.chart_config)
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.start !== nextProps.start || this.props.end !== nextProps.end) { //selected date span changed?
            this.props.pieLoad(nextProps.start, nextProps.end)
        } else {
        	var names = {}
        	var colors = {}
        	var columns = []
        	var sum_i = 0
        	var sum_e = 0
        	var id = null
        	nextProps.slices.forEach(
        		(s) => {
        			if (s.s<0) {
        				sum_e += s.s
        				id = 'n' + s.c
        				names[id] = 'nimi' + s.c
        				colors[id] = 'red'
        				columns.push([id, -s.s])
        			}else{
        				sum_i += s.s
        				id = 'p' + s.c
        				names[id] = 'nimi' + s.c
        				colors[id] = 'green'
        				columns.push([id, s.s])
        			}
        		}
        	)
        	this.chart_config.sum_i = sum_i
        	this.chart_config.sum_e = sum_e
            this.chart_config.data.names = names
            this.chart_config.data.colors = colors
            this.chart_config.data.columns = columns
            this.draw()
        }
    }

    render() {
        return ( 
        	<div id = "pie" onMouseOut = {() => this.onmouseout()} />
        )
    }
}

const mapStateToProps = (store) => {
    return {
        start: store.dateRange.s,
        end: store.dateRange.e,
        slices: store.pie.slices
    }
}

function mapDispatchToProps(dispatch) {
    return ({
        pieLoad: (s, e) => {
            dispatch(pie_load(s, e))
        },
        categoryLoad: (c, d1, d2) => {
        	console.log("todo categoryLoad")
            dispatch(category_load(c, d1, d2))
        }        
    })
}

export default connect(mapStateToProps, mapDispatchToProps)(Pie)